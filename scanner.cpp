#line 2 "scanner.cpp"

#line 4 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yynoreturn yy_fatal_error (yyconst char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[221] =
    {   0,
        0,    0,    0,    0,   96,   94,   93,   92,   94,   73,
       90,   94,   82,   83,   88,   86,   81,   87,   74,   72,
       68,   68,   68,   91,   79,   75,   89,   76,   70,   37,
       70,   70,   33,   29,   70,   70,   70,   35,   34,   36,
       70,   32,   31,   70,   70,   30,   70,   77,   78,   80,
       84,   85,   95,    0,   69,   73,    0,    0,    0,   72,
       68,   70,   70,   70,   70,   70,   70,   70,   56,   70,
       70,   70,   20,   70,   70,   70,   70,   70,   70,   58,
       70,   44,   70,   70,   43,   70,   70,   70,   70,   21,
       70,   70,   70,   70,   16,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   57,   71,   64,   65,   42,   15,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   48,   70,   70,   66,   70,   70,
       70,   70,   70,   70,   70,   70,   46,   70,   18,   27,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   49,
       70,   70,   47,   70,   70,   70,   50,   70,   53,   67,
       17,   26,   62,   70,   59,   22,   63,   70,   70,   61,
       70,    6,   70,   70,   70,   41,   38,   70,   70,   70,
       70,   70,   55,   54,   28,   70,   70,   39,   70,   45,
       24,   13,   23,   70,    3,   52,    7,   70,   19,   70,

        9,   11,    4,   25,   70,   70,   10,   12,   51,   14,
       70,   40,    8,    1,   70,    2,    5,   70,   60,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    6,    7,    8,    1,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   19,
       20,   18,   18,   18,   18,   18,   18,   21,   22,   23,
       24,   25,    1,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       35,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   35,   65,   66,   67,   68,
       69,   70,   35,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,    1,    1,    1,   35,    1,
        1,    1,    1,    1,    1,    1,   35,    1,    1,    1,
       35,    1,    1,    1,   35,    1,   35,    1,    1,    1,
        1,    1,    1,   35,    1,    1,    1,    1,    1,    1,
       35,    1,    1,    1,    1,    1,    1,    1,   35,    1,
        1,    1,   35,    1,    1,    1,   35,    1,   35,    1,
        1,    1,    1,    1,    1,   35,    1,    1,    1,    1,
        1,    1,    1,    1,   35,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[83] =
    {   0,
        1,    2,    3,    2,    3,    2,    4,    1,    1,    5,
        5,    1,    1,    1,    1,    1,    1,    6,    6,    6,
        1,    1,    1,    1,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    7,    1,    1,    8,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        5,    1
    } ;

static yyconst flex_uint16_t yy_base[228] =
    {   0,
        0,    0,    0,    0,  104, 1610, 1610, 1610,   97,    0,
     1610,   65, 1610, 1610, 1610, 1610, 1610, 1610, 1610,    0,
       68,   71,   74, 1610, 1610, 1610, 1610, 1610,   78,   81,
      120,   90,   96,  173,  129,  139,  150,  146,  193,  203,
      233,  237,  256,  162,  251,  247,  279, 1610, 1610, 1610,
     1610, 1610, 1610,   89, 1610,    0,  168,  308,  263,    0,
      222,  313,  317,  323,  326,  329,  332,  335,  338,  355,
      382,  385,  388,  393,  399,  413,  437,  407,  454,  462,
      465,  471,  475,  480,  487,  496,  504,  525,  518,  542,
      547,  563,  571,  576,  580,  558,  601,  629,  604,  632,

      642,  646,  649,  672,  652, 1610,  662,  675,  680,  691,
      702,  705,  720,  732,  729,  735,  744,  751,  763,  782,
      774,  792,  812,  796,  820,  824,  830,  841,  850,  858,
      862,  872,  879,  890,  903,  906,  919,  922,  933,  937,
      945,  951,  962,  966,  976,  993,  996, 1000, 1006, 1022,
     1025, 1045, 1049, 1053, 1056, 1063, 1070, 1073, 1077, 1087,
     1094, 1101, 1115, 1118, 1121, 1125, 1132, 1139, 1143, 1146,
     1149, 1177, 1190, 1193, 1196, 1204, 1207, 1219, 1210, 1223,
     1234, 1252, 1262, 1272, 1278, 1281, 1291, 1295, 1312, 1319,
     1322, 1337, 1340, 1343, 1346, 1350, 1363, 1366, 1369, 1389,

     1393, 1396, 1408, 1411, 1415, 1422, 1418, 1437, 1441, 1449,
     1461, 1464, 1470, 1475, 1480, 1483, 1488, 1491, 1494, 1610,
     1569, 1577, 1585, 1588, 1595, 1598, 1601
    } ;

static yyconst flex_int16_t yy_def[228] =
    {   0,
      220,    1,  221,  221,  220,  220,  220,  220,  222,  223,
      220,  224,  220,  220,  220,  220,  220,  220,  220,  225,
      226,  226,  226,  220,  220,  220,  220,  220,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  220,  220,  220,
      220,  220,  220,  222,  220,  223,  220,  224,  224,  225,
      226,  226,  226,  226,  226,  226,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,   88,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  220,  226,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,    0,
      220,  220,  220,  220,  220,  220,  220
    } ;

static yyconst flex_uint16_t yy_nxt[1693] =
    {   0,
        6,    7,    8,    6,    6,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   36,   38,   39,   40,   41,   36,
       42,   43,   44,   45,   46,   36,   47,   36,   36,   36,
       48,    6,   49,   50,    6,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   36,   42,
       43,   44,   45,   46,   36,   47,   36,   36,   36,   51,
        6,   52,   57,   57,   57,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   55,   66,   66,   66,   66,   66,

       66,   64,   55,  220,   65,  220,   68,   66,   66,   66,
      220,   69,  220,   66,   66,   66,   59,  220,  220,   74,
      220,  220,   63,   75,   76,   63,  220,  220,   63,  220,
      220,   64,   63,  220,   65,   63,   68,   66,   66,   66,
      220,   69,  220,   77,   63,   70,   66,   66,   66,   74,
       63,  220,   71,   75,   76,  220,   66,   66,   66,   72,
       73,  220,  220,   66,   66,   66,  220,   66,   66,   66,
       84,  220,   77,  220,   63,   70,  106,  220,   85,   66,
       66,   66,   71,   63,  220,   57,   57,   57,   72,   73,
       66,   66,   66,   63,  220,   98,  220,  220,   78,   84,

       63,   79,  220,   80,   63,   99,   81,  220,   85,  220,
       66,   66,   66,  220,  220,   82,   63,   83,  220,  220,
       66,   66,   66,  220,  220,   98,  220,   63,   78,   87,
      220,   79,   86,   80,   99,  220,   81,  220,   88,   61,
       61,   61,   89,  220,   82,  220,   83,   63,   90,  220,
       66,   66,   66,  220,   66,   66,   66,   63,   91,   87,
      220,   86,   92,  220,   66,   66,   66,   88,   66,   66,
       66,   89,  220,   66,   66,   66,   63,   90,  102,  220,
       57,   57,   57,   93,  103,   94,  220,   63,   91,  104,
      100,   63,   92,   95,  220,   96,   66,   66,   66,  101,

       97,   63,  220,  220,  220,   63,  220,  220,  102,  105,
       63,  220,   93,  103,  220,   94,  106,  220,  104,  100,
      220,  220,   95,  220,   96,  220,  220,  220,  101,   97,
       66,   66,   66,   63,   66,   66,   66,  220,  220,  105,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,  220,  220,
      220,  220,  220,  109,  220,  107,  220,   63,  108,  220,
      220,   63,   66,   66,   66,  220,  220,   63,  220,  220,
       63,  220,  220,   63,  220,  220,   63,  220,  220,   63,
      220,  220,   63,  109,  107,  220,  220,  108,  110,   66,

       66,   66,   66,   66,   66,   66,   66,   66,  220,   63,
       66,   66,   66,  111,  220,  220,   66,   66,   66,  112,
      220,  113,  220,  114,   66,   66,   66,  110,  220,  115,
       66,   66,   66,  220,  220,  116,   63,  220,  220,   63,
      220,  117,   63,  111,  220,  220,  118,   63,  112,  120,
      113,  220,  114,   63,   66,   66,   66,  220,  115,  220,
      220,   63,  220,  220,  116,  220,  119,   63,  220,  220,
      117,   66,   66,   66,  220,  220,  118,  220,  120,   66,
       66,   66,   66,   66,   66,  220,  220,  121,   66,   66,
       66,   63,   66,   66,   66,  220,  119,   66,   66,   66,

      220,  122,  220,  123,   66,   66,   66,  220,   63,  220,
      220,  124,  220,   66,   66,   66,   63,  121,  220,   63,
      125,   66,   66,   66,  220,   63,  220,  126,  220,   63,
      122,  220,  123,  220,   63,   66,   66,   66,  127,  220,
      124,   63,   66,   66,   66,  128,  220,  220,  220,  125,
       63,  220,  220,  129,  220,  130,  131,  126,   63,   66,
       66,   66,  133,  220,   66,   66,   66,  127,  220,  132,
      220,  220,   63,  220,  128,   66,   66,   66,  220,   63,
       66,   66,   66,  129,  134,  130,  131,  220,   66,   66,
       66,  133,  220,   66,   66,   66,   63,  144,  132,  137,

      220,   63,  220,  138,  220,  220,  135,  136,  141,  220,
       67,  142,   63,  134,  139,  220,  140,   63,   66,   66,
       66,   66,   66,   66,  143,   63,  144,  220,  220,  137,
       63,  220,  147,  138,  220,  135,  136,  220,  141,  220,
       67,  142,  220,  139,  145,  140,   66,   66,   66,   66,
       66,   66,  220,  143,  220,   63,  220,  220,   63,   66,
       66,   66,  147,   66,   66,   66,   66,   66,   66,   66,
       66,   66,  220,  145,  220,  220,  148,  220,  146,   66,
       66,   66,  149,   63,  220,  150,   63,  220,  151,   66,
       66,   66,   66,   66,   66,  220,   63,   66,   66,   66,

       63,  152,  220,   63,  220,  148,   63,  146,   66,   66,
       66,  149,  220,  153,  150,  220,   63,  151,  220,   66,
       66,   66,   66,   66,   66,  220,   63,  220,  220,   63,
      220,  152,  220,  220,   63,  220,  220,   66,   66,   66,
      220,  220,  153,  154,  155,   63,   66,   66,   66,   66,
       66,   66,   66,   66,   66,  220,   63,  220,  158,   63,
      220,   66,   66,   66,  220,  220,  156,  220,   66,   66,
       66,  220,  154,  155,   63,  157,  220,  220,  159,  160,
       66,   66,   66,   63,  220,  220,   63,  220,  158,   63,
      162,   66,   66,   66,  161,  156,  220,  220,   63,   66,

       66,   66,  220,  220,  157,   63,  220,  159,  160,   66,
       66,   66,  220,   66,   66,   66,  164,   63,  220,  220,
      162,  165,  220,  161,  220,  163,  220,  220,   63,   66,
       66,   66,  167,  220,  220,  220,   63,   66,   66,   66,
      166,   66,   66,   66,  220,  164,   63,   66,   66,   66,
       63,  165,  220,  220,  163,  220,  220,  168,   66,   66,
       66,  167,  220,  169,  220,  220,   63,   66,   66,   66,
      166,  220,  170,  220,   63,   66,   66,   66,   63,   66,
       66,   66,  220,  171,   63,  220,  220,  168,  220,   66,
       66,   66,  169,  220,  220,   63,   66,   66,   66,  220,

      172,  170,  220,  173,   63,  220,  220,   66,   66,   66,
      220,  220,   63,  171,  174,  220,   63,  175,  220,  176,
       66,   66,   66,   66,   66,   66,   63,  220,  220,  172,
      220,  220,  173,   63,  220,  177,   66,   66,   66,   66,
       66,   66,  220,  174,   63,  220,  175,  220,  178,  176,
       66,   66,   66,  220,   66,   66,   66,   63,  220,  220,
       63,  179,   66,   66,   66,  177,  220,  220,   66,   66,
       66,  220,  220,   63,  220,  220,   63,  178,  180,   66,
       66,   66,  220,   66,   66,   66,  220,   63,  220,  220,
      179,   63,  181,   66,   66,   66,  220,  220,  220,   63,

      220,  184,  220,  220,  182,   63,  220,  220,  180,  183,
       66,   66,   66,   66,   66,   66,   63,   66,   66,   66,
       63,  181,  185,   66,   66,   66,  220,  187,  220,  186,
       63,  184,  220,  182,  220,  188,  220,  220,  183,   66,
       66,   66,   66,   66,   66,  220,  220,   63,  220,  220,
       63,  220,  185,  220,   63,  220,  220,  187,  220,  186,
       63,  220,   66,   66,   66,  188,   66,   66,   66,  189,
       66,   66,   66,   66,   66,   66,   63,  220,  220,   63,
       66,   66,   66,  220,  192,  220,  190,   66,   66,   66,
       66,   66,   66,  191,   66,   66,   66,  220,  189,   63,

      220,  193,  220,   63,   66,   66,   66,   63,  220,  220,
       63,   66,   66,   66,  192,  190,  194,   63,   66,   66,
       66,  220,  191,  220,   63,  220,  220,   63,  220,  220,
      193,   63,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   63,   66,   66,   66,  194,  220,  220,   63,   66,
       66,   66,  220,  195,  220,   63,   66,   66,   66,  196,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   63,
      220,  220,   63,  220,  220,   63,  220,  197,  220,   63,
      220,  220,  195,  220,  220,  220,   63,  198,  196,  220,
      199,  200,  220,   63,   66,   66,   66,   63,  220,  220,

       63,  220,  220,   63,  220,  220,  197,   66,   66,   66,
       66,   66,   66,   66,   66,   66,  198,  220,  220,  199,
      200,   66,   66,   66,   66,   66,   66,   66,   66,   66,
      201,   63,  220,  220,  202,  220,   66,   66,   66,  203,
       66,   66,   66,  220,   63,  220,  220,   63,  204,  220,
       63,   66,   66,   66,  220,  205,  220,  220,   63,  201,
      220,   63,  220,  202,   63,  206,  220,  220,  203,   66,
       66,   66,  220,   63,  207,  220,  220,   63,  204,   66,
       66,   66,  220,  220,  205,  220,  220,  220,   63,   66,
       66,   66,  220,  208,  206,   66,   66,   66,   66,   66,

       66,  220,  220,  207,  220,  220,   63,  220,   66,   66,
       66,  220,   66,   66,   66,  220,   63,  220,  220,  209,
      220,  220,  208,  210,  220,  220,   63,  220,  220,   66,
       66,   66,   63,  220,  220,   63,   66,   66,   66,   66,
       66,   66,  220,  220,  220,   63,  220,  220,  209,   63,
      211,  220,  220,  210,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   63,   66,   66,   66,
      220,  220,  212,   63,  220,  220,   63,  220,  220,  211,
       66,   66,   66,   66,   66,   66,   66,   66,   66,  220,
      220,   63,  220,  220,   63,  220,  220,   63,  220,  220,

       63,  220,  212,  220,   63,  220,   66,   66,   66,  213,
       66,   66,   66,   66,   66,   66,  220,   63,  220,  220,
       63,  220,  220,   63,  214,   66,   66,   66,   66,   66,
       66,  220,   66,   66,   66,   66,   66,   66,  213,   66,
       66,   66,  220,   63,  215,  220,  220,   63,  220,  220,
       63,  220,  220,  214,   66,   66,   66,  216,   66,   66,
       66,  220,   63,  220,  220,   63,   66,   66,   66,   63,
      220,  220,   63,  220,  215,  220,   63,  220,   66,   66,
       66,   66,   66,   66,  220,  220,  216,   66,   66,   66,
      220,   63,   66,   66,   66,   63,  220,   66,   66,   66,

       66,   66,   66,   63,  217,   66,   66,   66,   66,   66,
       66,   66,   66,   66,  220,   63,  220,  220,   63,  220,
      220,  218,  220,  220,   63,  220,  220,  220,  220,   63,
      220,  220,  220,  217,   63,  220,  220,   63,  220,  219,
      220,  220,   63,  220,  220,   63,  220,  220,   63,  220,
      218,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  219,   53,
       53,   53,   53,   53,   53,   53,   53,   54,   54,   54,
      220,  220,   54,   54,   54,   56,   56,  220,  220,   56,
       56,   56,   56,   58,   58,   60,  220,  220,   60,  220,

       60,   60,   60,   62,  220,   62,   67,  220,   67,    5,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220

    } ;

static yyconst flex_int16_t yy_chk[1693] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   12,   12,   12,   21,   21,   21,   22,   22,
       22,   23,   23,   23,   54,   29,   29,   29,   30,   30,

       30,   22,    9,    5,   23,    0,   29,   32,   32,   32,
        0,   30,    0,   33,   33,   33,   12,    0,    0,   32,
        0,    0,   21,   32,   33,   22,    0,    0,   23,    0,
        0,   22,   29,    0,   23,   30,   29,   31,   31,   31,
        0,   30,    0,   33,   32,   31,   35,   35,   35,   32,
       33,    0,   31,   32,   33,    0,   36,   36,   36,   31,
       31,    0,    0,   38,   38,   38,    0,   37,   37,   37,
       35,    0,   33,    0,   31,   31,   57,    0,   37,   44,
       44,   44,   31,   35,    0,   57,   57,   57,   31,   31,
       34,   34,   34,   36,    0,   44,    0,    0,   34,   35,

       38,   34,    0,   34,   37,   44,   34,    0,   37,    0,
       39,   39,   39,    0,    0,   34,   44,   34,    0,    0,
       40,   40,   40,    0,    0,   44,    0,   34,   34,   40,
        0,   34,   39,   34,   44,    0,   34,    0,   40,   61,
       61,   61,   40,    0,   34,    0,   34,   39,   40,    0,
       41,   41,   41,    0,   42,   42,   42,   40,   41,   40,
        0,   39,   42,    0,   46,   46,   46,   40,   45,   45,
       45,   40,    0,   43,   43,   43,   61,   40,   46,    0,
       59,   59,   59,   42,   46,   43,    0,   41,   41,   46,
       45,   42,   42,   43,    0,   43,   47,   47,   47,   45,

       43,   46,    0,    0,    0,   45,    0,    0,   46,   47,
       43,    0,   42,   46,   59,   43,   58,    0,   46,   45,
        0,    0,   43,    0,   43,   58,   58,   58,   45,   43,
       62,   62,   62,   47,   63,   63,   63,    0,    0,   47,
       64,   64,   64,   65,   65,   65,   66,   66,   66,   67,
       67,   67,   68,   68,   68,   69,   69,   69,    0,   58,
        0,    0,    0,   68,    0,   64,    0,   62,   65,    0,
        0,   63,   70,   70,   70,    0,    0,   64,    0,    0,
       65,    0,    0,   66,    0,    0,   67,    0,    0,   68,
        0,    0,   69,   68,   64,    0,    0,   65,   70,   71,

       71,   71,   72,   72,   72,   73,   73,   73,    0,   70,
       74,   74,   74,   71,    0,    0,   75,   75,   75,   71,
        0,   71,    0,   72,   78,   78,   78,   70,    0,   74,
       76,   76,   76,    0,    0,   74,   71,    0,    0,   72,
        0,   75,   73,   71,    0,    0,   76,   74,   71,   78,
       71,    0,   72,   75,   77,   77,   77,    0,   74,    0,
        0,   78,    0,    0,   74,    0,   77,   76,    0,    0,
       75,   79,   79,   79,    0,    0,   76,    0,   78,   80,
       80,   80,   81,   81,   81,    0,    0,   79,   82,   82,
       82,   77,   83,   83,   83,    0,   77,   84,   84,   84,

        0,   81,    0,   81,   85,   85,   85,    0,   79,    0,
        0,   83,    0,   86,   86,   86,   80,   79,    0,   81,
       84,   87,   87,   87,    0,   82,    0,   86,    0,   83,
       81,    0,   81,    0,   84,   89,   89,   89,   86,    0,
       83,   85,   88,   88,   88,   87,    0,    0,    0,   84,
       86,    0,    0,   88,    0,   88,   88,   86,   87,   90,
       90,   90,   89,    0,   91,   91,   91,   86,    0,   88,
        0,    0,   89,    0,   87,   96,   96,   96,    0,   88,
       92,   92,   92,   88,   91,   88,   88,    0,   93,   93,
       93,   89,    0,   94,   94,   94,   90,   96,   88,   93,

        0,   91,    0,   94,    0,    0,   92,   92,   95,    0,
       95,   95,   96,   91,   94,    0,   94,   92,   97,   97,
       97,   99,   99,   99,   95,   93,   96,    0,    0,   93,
       94,    0,   99,   94,    0,   92,   92,    0,   95,    0,
       95,   95,    0,   94,   97,   94,   98,   98,   98,  100,
      100,  100,    0,   95,    0,   97,    0,    0,   99,  101,
      101,  101,   99,  102,  102,  102,  103,  103,  103,  105,
      105,  105,    0,   97,    0,    0,  100,    0,   98,  107,
      107,  107,  101,   98,    0,  102,  100,    0,  103,  104,
      104,  104,  108,  108,  108,    0,  101,  109,  109,  109,

      102,  104,    0,  103,    0,  100,  105,   98,  110,  110,
      110,  101,    0,  104,  102,    0,  107,  103,    0,  111,
      111,  111,  112,  112,  112,    0,  104,    0,    0,  108,
        0,  104,    0,    0,  109,    0,    0,  113,  113,  113,
        0,    0,  104,  111,  112,  110,  115,  115,  115,  114,
      114,  114,  116,  116,  116,    0,  111,    0,  115,  112,
        0,  117,  117,  117,    0,    0,  113,    0,  118,  118,
      118,    0,  111,  112,  113,  114,    0,    0,  116,  117,
      119,  119,  119,  115,    0,    0,  114,    0,  115,  116,
      119,  121,  121,  121,  118,  113,    0,    0,  117,  120,

      120,  120,    0,    0,  114,  118,    0,  116,  117,  122,
      122,  122,    0,  124,  124,  124,  121,  119,    0,    0,
      119,  122,    0,  118,    0,  120,    0,    0,  121,  123,
      123,  123,  124,    0,    0,    0,  120,  125,  125,  125,
      123,  126,  126,  126,    0,  121,  122,  127,  127,  127,
      124,  122,    0,    0,  120,    0,    0,  126,  128,  128,
      128,  124,    0,  126,    0,    0,  123,  129,  129,  129,
      123,    0,  127,    0,  125,  130,  130,  130,  126,  131,
      131,  131,    0,  129,  127,    0,    0,  126,    0,  132,
      132,  132,  126,    0,    0,  128,  133,  133,  133,    0,

      130,  127,    0,  131,  129,    0,    0,  134,  134,  134,
        0,    0,  130,  129,  132,    0,  131,  133,    0,  134,
      135,  135,  135,  136,  136,  136,  132,    0,    0,  130,
        0,    0,  131,  133,    0,  135,  137,  137,  137,  138,
      138,  138,    0,  132,  134,    0,  133,    0,  136,  134,
      139,  139,  139,    0,  140,  140,  140,  135,    0,    0,
      136,  138,  141,  141,  141,  135,    0,    0,  142,  142,
      142,    0,    0,  137,    0,    0,  138,  136,  141,  143,
      143,  143,    0,  144,  144,  144,    0,  139,    0,    0,
      138,  140,  142,  145,  145,  145,    0,    0,    0,  141,

        0,  145,    0,    0,  143,  142,    0,    0,  141,  144,
      146,  146,  146,  147,  147,  147,  143,  148,  148,  148,
      144,  142,  146,  149,  149,  149,    0,  148,    0,  147,
      145,  145,    0,  143,    0,  149,    0,    0,  144,  150,
      150,  150,  151,  151,  151,    0,    0,  146,    0,    0,
      147,    0,  146,    0,  148,    0,    0,  148,    0,  147,
      149,    0,  152,  152,  152,  149,  153,  153,  153,  151,
      154,  154,  154,  155,  155,  155,  150,    0,    0,  151,
      156,  156,  156,    0,  155,    0,  152,  157,  157,  157,
      158,  158,  158,  154,  159,  159,  159,    0,  151,  152,

        0,  156,    0,  153,  160,  160,  160,  154,    0,    0,
      155,  161,  161,  161,  155,  152,  158,  156,  162,  162,
      162,    0,  154,    0,  157,    0,    0,  158,    0,    0,
      156,  159,  163,  163,  163,  164,  164,  164,  165,  165,
      165,  160,  166,  166,  166,  158,    0,    0,  161,  167,
      167,  167,    0,  164,    0,  162,  168,  168,  168,  165,
      169,  169,  169,  170,  170,  170,  171,  171,  171,  163,
        0,    0,  164,    0,    0,  165,    0,  168,    0,  166,
        0,    0,  164,    0,    0,    0,  167,  169,  165,    0,
      171,  171,    0,  168,  172,  172,  172,  169,    0,    0,

      170,    0,    0,  171,    0,    0,  168,  173,  173,  173,
      174,  174,  174,  175,  175,  175,  169,    0,    0,  171,
      171,  176,  176,  176,  177,  177,  177,  179,  179,  179,
      173,  172,    0,    0,  174,    0,  178,  178,  178,  175,
      180,  180,  180,    0,  173,    0,    0,  174,  178,    0,
      175,  181,  181,  181,    0,  179,    0,    0,  176,  173,
        0,  177,    0,  174,  179,  180,    0,    0,  175,  182,
      182,  182,    0,  178,  181,    0,    0,  180,  178,  183,
      183,  183,    0,    0,  179,    0,    0,    0,  181,  184,
      184,  184,    0,  182,  180,  185,  185,  185,  186,  186,

      186,    0,    0,  181,    0,    0,  182,    0,  187,  187,
      187,    0,  188,  188,  188,    0,  183,    0,    0,  186,
        0,    0,  182,  187,    0,    0,  184,    0,    0,  189,
      189,  189,  185,    0,    0,  186,  190,  190,  190,  191,
      191,  191,    0,    0,    0,  187,    0,    0,  186,  188,
      189,    0,    0,  187,  192,  192,  192,  193,  193,  193,
      194,  194,  194,  195,  195,  195,  189,  196,  196,  196,
        0,    0,  194,  190,    0,    0,  191,    0,    0,  189,
      197,  197,  197,  198,  198,  198,  199,  199,  199,    0,
        0,  192,    0,    0,  193,    0,    0,  194,    0,    0,

      195,    0,  194,    0,  196,    0,  200,  200,  200,  198,
      201,  201,  201,  202,  202,  202,    0,  197,    0,    0,
      198,    0,    0,  199,  200,  203,  203,  203,  204,  204,
      204,    0,  205,  205,  205,  207,  207,  207,  198,  206,
      206,  206,    0,  200,  205,    0,    0,  201,    0,    0,
      202,    0,    0,  200,  208,  208,  208,  206,  209,  209,
      209,    0,  203,    0,    0,  204,  210,  210,  210,  205,
        0,    0,  207,    0,  205,    0,  206,    0,  211,  211,
      211,  212,  212,  212,    0,    0,  206,  213,  213,  213,
        0,  208,  214,  214,  214,  209,    0,  215,  215,  215,

      216,  216,  216,  210,  211,  217,  217,  217,  218,  218,
      218,  219,  219,  219,    0,  211,    0,    0,  212,    0,
        0,  215,    0,    0,  213,    0,    0,    0,    0,  214,
        0,    0,    0,  211,  215,    0,    0,  216,    0,  218,
        0,    0,  217,    0,    0,  218,    0,    0,  219,    0,
      215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  218,  221,
      221,  221,  221,  221,  221,  221,  221,  222,  222,  222,
        0,    0,  222,  222,  222,  223,  223,    0,    0,  223,
      223,  223,  223,  224,  224,  225,    0,    0,  225,    0,

      225,  225,  225,  226,    0,  226,  227,    0,  227,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[96] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexico.l"
#line 5 "lexico.l"
#include <iostream>
#include <QString>
#include "parser.h"

#include <string>
#include <QList>

    int yylex();
    void yyerror(const char *s);
    int linea = 0;
    int columna = 1;
    int anterior = 0;



#line 947 "scanner.cpp"

#define INITIAL 0
#define COM 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

			int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 45 "lexico.l"


#line 1167 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 221 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1610 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 47 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pmkdisk;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 48 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return prmdisk;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 49 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pfdisk;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pmount;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pumount;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pmkfs;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return plogin;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 54 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return plogout;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pmkgrp;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return prmgrp;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pmkusr;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return prmusr;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pchmod;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return ptouch;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pcat;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return prm;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pedit;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 64 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pren;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 65 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pmkdir;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 66 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pcp;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 67 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pmv;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 68 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pfind;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pchown;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pchgrp;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pPause;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return pexec;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 73 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return prep;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return psize;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pF;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pU;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pR;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pL;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pK;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pM;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 86 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pB;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pPath;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return ptype;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pdelete;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 90 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pname;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 91 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return padd;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 92 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pid;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 93 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pfs;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 94 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return puser;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 95 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pPwd;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 96 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pusr;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 97 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pgrp;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 98 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pugo;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 99 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pcont;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 100 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pstdin;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 101 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pfilen;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 102 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pdest;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 103 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pruta;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 104 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return proot;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 105 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pBf;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 106 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pWf;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 107 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pFf;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 108 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return pfile;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 109 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return precovery;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 110 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return ploss;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 111 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return fast;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 112 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return full;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 113 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return ext2;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 114 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return ext3;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 115 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return mbr;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 116 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext); strcpy(yylval.TEXT, yytext);return disk;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 119 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return entero;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 120 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cadena;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 121 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return identificador;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 122 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return caracter;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 123 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return tpath;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 124 "lexico.l"
{/*a C comment*/}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return punto;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return bracketabre;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return bracketcierra;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return corcheteabre;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return corchetecierra;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return puntocoma;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return potencia;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return coma;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return parentesisabre;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return parentesiscierra;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 136 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return llaveabre;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 137 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return llavecierra;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return mas;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return menos;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return multiplicacion;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return igual;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return dolar;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "lexico.l"
{columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);return dospuntos;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 145 "lexico.l"
{linea++; columna=0; anterior=0;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "lexico.l"
{ columna++; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 150 "lexico.l"
{

std::cout<<"Error Lexico: "<<linea<<"\n";

}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "lexico.l"
ECHO;
	YY_BREAK
#line 1715 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 221 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 221 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 220);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 155 "lexico.l"
